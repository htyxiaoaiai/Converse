#define _CRT_SECURE_NO_WARNINGS
#include"CommentConvert.h"

STATE g_state = NULL_STATE;

void DoNullState(FILE* pfRead, FILE* pfWrite)
{
	int first = 0;
	int second = 0;
	first = fgetc(pfRead);
	switch (first)
	{
	case '/':
	{
		second = fgetc(pfRead);
		if (second == '*')
		{
			fputc('/', pfWrite);
			fputc('/', pfWrite);
			g_state = C_STATE;
		}
		else if (second == '/')
		{
			fputc(first, pfWrite);
			fputc(second, pfWrite);
			g_state = CPP_STATE;
		}
		else
		{
			fputc(first, pfWrite);
			fputc(second, pfWrite);
		}
		break;
	}
	case EOF:
	{
		g_state = END_STATE;
		break;
	}
	default:
	{
		fputc(first, pfWrite);
		break;
	}
	}
}
void DoCState(FILE* pfRead, FILE* pfWrite)
{
	int first = 0;
	int second = 0;
	first = fgetc(pfRead);
	switch (first)
	{
	case '*':
	{
		second = fgetc(pfRead);
		if (second == '/')
		{
			fputc('\n', pfWrite);
			g_state = NULL_STATE;
		}
		else
		{
			fputc(first,pfWrite);
			ungetc(second,pfRead);
		}
		break;
	}
	case '\n':
	{
		fputc(first, pfWrite);
		fputc('/', pfWrite);
		fputc('/', pfWrite);
		break;
	}
	case EOF:
	{
		g_state = END_STATE;
		break;
	}
	default:
	{
		fputc(first, pfWrite);
		break;
	}
	}
}
void DoCppState(FILE* pfRead, FILE* pfWrite)
{
	int first = 0;
	int second = 0;
	first = fgetc(pfRead);
	switch (first)
	{
	case '/':
	{
		second = fgetc(pfRead);
		if (second == '/')
		{
			fputc(first, pfWrite);
			fputc(second, pfWrite);
			g_state = NULL_STATE;
		}
		else
		{
			fputc(first, pfWrite);
			ungetc(second, pfRead);
		}
		break;
	}
	case '\n':
	{
		fputc(first, pfWrite);
		g_state = NULL_STATE;
		break;
	}
	case EOF:
	{
		g_state = END_STATE;
		break;
	}
	default:
	{
		fputc(first, pfWrite);
		break;
	}
	}
}
void DoConvert(char* ReadFile, char* WriteFile)
{
	assert(ReadFile);
	assert(WriteFile);
	printf("转换开始\n");
	//打开文件
	FILE * pfRead = fopen(ReadFile,"r");
	if (pfRead == NULL)
	{
		perror("open for read");
		exit(EXIT_FAILURE);
	}
	FILE * pfWrite = fopen(WriteFile, "w");
	if (pfWrite == NULL)
	{
		fclose(pfRead);
		perror("open for write");
		exit(EXIT_FAILURE);
	}
	//转换开始
	while (g_state != END_STATE)
	{
		switch (g_state)
		{
		case NULL_STATE:
			DoNullState(pfRead, pfWrite);
			break;
		case C_STATE:
			DoCState(pfRead, pfWrite);
			break;
		case CPP_STATE:
			DoCppState(pfRead, pfWrite);
			break;
		case END_STATE:
			break;
		}
	}
	//转换结束
	fclose(pfRead);
	fclose(pfWrite);
	printf("转换结束\n");
}
void CommentConvert()
{
	DoConvert(READ_FILE_NAME, WRITE_FILE_NAME);
}
